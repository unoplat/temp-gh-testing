name: Develop Branch Action

# todo: add container vulnerability scan

on:
  pull_request_target:
    types: [opened]
    branches:
      - develop
  workflow_dispatch:

jobs:
  dev-pr:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      current-image-matrix: ${{ steps.set-image-matrix.outputs.image-matrix}}

    steps:
    - name: Checkout our repository
      uses: actions/checkout@v4
      with:
        ref: main
    - name: Read JSON Config
      id: read_json
      uses: actions/github-script@v5
      with:
        script: |
          const fs = require('fs');
          const config = JSON.parse(fs.readFileSync('.github/github-action-config.json', 'utf8'));
          core.setOutput('config', config);
    - name: Conditional Docker Image Scan
      working-directory: charts
      if: ${{ fromJson(steps.read_json.outputs.config).dockerImageScan }}
      env:
        HELM_VALUES_FILE_PATH: ${{ fromJson(steps.read_json.outputs.config).upStreamChartName }}/values.yaml
      run: |
        arch=$(echo "${{ runner.arch }}" | awk '{print tolower($0)}')
        os=$(echo "${{ runner.os }}" | awk '{print tolower($0)}')
        echo $arch
        echo $os
        wget https://github.com/unoplat/unoplat-ci-cd-scripts/releases/download/v1.2.5/image-scan-v1.2.5-$os-$arch.tar.gz
        tar -xzf image-scan-v1.2.5-$os-$arch.tar.gz
        if [ -f docker_images.json ]; then
          rm docker_images.json
        fi
        ./image-scan
        rm image-scan
        rm image-scan*.tar.gz

    # - name: Push changes to our repository
    #   run: |
    #     git config --global user.name "GitHub Action"
    #     git config --global user.email "action@github.com"
    #     git pull origin
    #     git add charts/*
    #     git add reports/*
    #     git commit -m "added charts and scan results"
    #     echo main
    #     git push origin main

    - name: Generate Matrix
      id: set-image-matrix
      uses: actions/github-script@v5
      with:
        script: |
          const fs = require('fs');
          const data = JSON.parse(fs.readFileSync('charts/docker_images.json', 'utf8'));
          const valuesArray = Object.values(data);
          core.setOutput('image-matrix', JSON.stringify(valuesArray));

  use-container-scan-matrix:
    needs: dev-pr
    runs-on: ubuntu-latest
    strategy:
      matrix:
        images: ${{fromJson(needs.dev-pr.outputs.current-image-matrix)}}
    steps:
      - name: Create an empty json file for current scan with current timestamp
        id: createfile
        run: |
          timestamp=$(date +%Y%m%d%H%M%S)
          touch reports/containercontainer-report-$timestamp.json
          echo "::set-output name=timestamp::$timestamp"
          
      - name: Generate Trivy Report 
        uses: aquasecurity/trivy-action@master
        with: 
          scan-type: 'image' 
          format: 'json' 
          output: "reports/container-security-analysis/container-report-${{ steps.createfile.outputs.timestamp }}.json" 
          ignore-unfixed: true 
          vuln-type: "os"
          severity: 'CRITICAL,HIGH' 
          image-ref: ${{ matrix.images }} 
