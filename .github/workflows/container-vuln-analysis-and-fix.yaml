name: Develop Branch Action

# todo: add container vulnerability scan

on:
  pull_request_target:
    types: [opened]
    branches:
      - develop
  workflow_dispatch:

jobs:
  dev-pr:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      should_run_next_job: ${{ steps.read_json.outputs.dockerImageScan }}
      current-image-matrix: ${{ steps.set-image-matrix.outputs.image-matrix}}

    steps:
    - name: Checkout our repository
      uses: actions/checkout@v4
      with:
        ref: main
    - name: Read JSON Config
      id: read_json
      uses: actions/github-script@v5
      with:
        script: |
          const fs = require('fs');
          const config = JSON.parse(fs.readFileSync('.github/github-action-config.json', 'utf8'));
          core.setOutput('config', config);
          core.setOutput('dockerImageScan',config.dockerImageScan)
    
        
    - name: Conditional Docker Image Scan
      working-directory: charts
      if: ${{ steps.read_json.outputs.dockerImageScan }}
      env:
        HELM_VALUES_FILE_PATH: ${{ fromJson(steps.read_json.outputs.config).upStreamChartName }}/values.yaml
      run: |
        arch=$(echo "${{ runner.arch }}" | awk '{print tolower($0)}')
        os=$(echo "${{ runner.os }}" | awk '{print tolower($0)}')
        echo $arch
        echo $os
        if [ "$arch" = "x64" ]; then
          arch="amd64"
        fi
        LATEST_RELEASE=$(curl -s https://api.github.com/repos/unoplat/unoplat-ci-cd-scripts/releases/latest | jq -r '.tag_name' | xargs)
        echo "Latest release info: $LATEST_RELEASE"
        wget https://github.com/unoplat/unoplat-ci-cd-scripts/releases/download/$LATEST_RELEASE/image-scan-$LATEST_RELEASE-$os-$arch.tar.gz
        tar -xzf image-scan-$LATEST_RELEASE-$os-$arch.tar.gz
        if [ -f docker_images.json ]; then
          rm docker_images.json
        fi
        ./image-scan
        rm image-scan
        rm image-scan*.tar.gz
          
    - name: Generate Matrix
      id: set-image-matrix
      uses: actions/github-script@v5
      if: ${{ steps.read_json.outputs.dockerImageScan }}
      with:
        script: |
          const fs = require('fs');
          const data = JSON.parse(fs.readFileSync('charts/docker_images.json', 'utf8'));
          let keysArray = Object.keys(data);
          core.setOutput('image-matrix', JSON.stringify(keysArray));

  use-container-scan-matrix:
    needs: dev-pr
    runs-on: ubuntu-latest
    if: ${{ needs.dev-pr.outputs.should_run_next_job }} == true
    strategy:
      matrix:
        images:  ${{fromJson(needs.dev-pr.outputs.current-image-matrix)}}    
    steps:
      - name: Checkout our repository
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Create an empty json file for current scan with current timestamp
        id: createfile
        run: |
          timestamp=$(date +%Y%m%d%H%M)
          export IMAGE_NAME=$(echo ${{ matrix.images }}  | awk -F'/' '{print $NF}' | cut -d ':' -f 1)
          echo "::set-output name=timestamp::$timestamp"
          echo "::set-output name=docker_image_name::$IMAGE_NAME"
      - name: Debug Output Paths
        run: |
          echo "Docker Image Name: ${{ steps.createfile.outputs.docker_image_name }}"
          echo "Timestamp: ${{ steps.createfile.outputs.timestamp }}"
         
      - name: Generate Trivy Report 
        uses: aquasecurity/trivy-action@master
        with: 
          scan-type: 'image' 
          format: 'json' 
          output: "reports/container-security-analysis/${{ steps.createfile.outputs.docker_image_name }}-container-report-${{ steps.createfile.outputs.timestamp }}.json" 
          ignore-unfixed: true 
          vuln-type: "os"
          severity: 'CRITICAL,HIGH' 
          image-ref: ${{ matrix.images }} 
      - name: Archive Trivy Reports
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.createfile.outputs.docker_image_name }}-container-report-${{ steps.createfile.outputs.timestamp }}
          path: reports/container-security-analysis/${{ steps.createfile.outputs.docker_image_name }}-container-report-${{ steps.createfile.outputs.timestamp }}.json
  commit-reports:
    needs: [use-container-scan-matrix,dev-pr]
    runs-on: ubuntu-latest
    if: ${{ needs.dev-pr.outputs.should_run_next_job }} == true
    steps:
      - name: Checkout our repository
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: reports/container-security-analysis/

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"

      - name: Commit and Push Changes
        run: |
          if git status --porcelain; then
            git pull origin main
            git add reports/*
            git commit -m "Add scan results"
            git push origin main
          else
            echo "No changes to commit."
          fi
  scan-and-patch-images:
    needs: [commit-reports,dev-pr]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout our repository
        uses: actions/checkout@v4
        with:
          ref: main
